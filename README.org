* ReactReact

** Context

   Reason is an OCaml-compatible language that compiles to JavaScript,
   has JSX support, and was created by the same author of ReactJS. So,
   of course, ReactJS was ported to reason.

   ReactJS maps well with FRP (in JavaScript-land, we can use
   [[https://github.com/acdlite/recompose][recompose]] and [[https://github.com/Reactive-Extensions/RxJS][RxJS]] to have a FRP-ish framework on top of React).

   OCaml has had, for a long time, a FRP library that also happens to
   be called [[http://erratique.ch/software/react][React]].

   ReactJS and React can work together, just as RxJS and ReactJS can
   by using recompose as a bridge.

   ReactReact is the bridge that was missing.

** Installation

   You need to have a [[https://bucklescript.github.io/bucklescript/Manual.html#_get_started][BuckleScript project]] already setup.

   If you use npm, in your project's directory:

   #+BEGIN_SRC sh
     npm install git+ssh://git@github.com:Denommus/react-react.git
   #+END_SRC

   Or if you use yarn:

   #+BEGIN_SRC sh
     yarn add git+ssh://git@github.com:Denommus/react-react.git
   #+END_SRC

   After that, edit ~bsconfig.json~ and include "react-frp",
   "react-react", and "reason-react" to the "bs-dependencies"
   array.

** How to use it

   Going through React's [[http://erratique.ch/software/react/doc/React][documentation]] is recommended past this point.
   Since this library is so simple, most of the features are actually
   from React. All the library does is to produce a valid ReactJS
   component out of React's signals and events (at least for now, more
   features are being planned).

   The heart of the library is the ~componentFromSignal~ function,
   which takes:

   1. a ~reducerComponent~
   2. props (it can be ~unit~, or a single prop, or a tuple of props)
   3. a function from signal of props to signal of
      ~reactElement~

   So, for instance, you could create a time counter like the
   following:

   #+BEGIN_SRC reason :exports code
     open ReactFrp.React;

     let initial = ref 0;

     /* timeS is a signal that represents the current value, timeF is the
        function that changes the signal's value */
     let (timeS, timeF) = S.create !initial;

     /* Increases the counter and updates the signal with the new value */
     let timeIncrement () => {
       initial := !initial + 1;
       timeF !initial
     };

     /* Calls timeIncrement every second */
     let timerId = Js.Global.setInterval timeIncrement 1000;

     /* This is the actual signal that will produce the component. Notice
        how it's produced by mapping the timeS signal to a component
        signal. I ignore the argument because this specific component
        doesn't have props */
     let vdomS _ =>
       S.map
         eq::(fun _ _ => false)
         (
           fun time => {
             let timeMessage = time == 1 ? "second" : "seconds";
             let greeting = {j|You've spent $time $timeMessage on this page!|j};
             <div> (ReasonReact.stringToElement greeting) </div>
           }
         )
         timeS;

     /* You need to create a component here, so it's only instanced once,
     like ReasonReact's documentation recommends */
     let component = ReactReact.reducerComponent "Counter";

     /* componentFromSignal will apply the signal into a real ReactJS
        component! The unit is passed because this component doesn't have
        props */
     let make _children => ReactReact.componentFromSignal component () vdomS;
   #+END_SRC

   Notice that I pass a function ~eq~ that always returns false to
   ~S.map~. I do that because equality between
   ~ReasonReact.reactElement~ is always true, and React only updates
   the signal when it detects that it has changed. So I need to force
   it to understand that it has changed (see [[http://erratique.ch/software/react/doc/React.html#sigeq][Equality]] in React's documentation).

*** Passing props

    To use props, just pass the value of the props as a tuple to ~componentFromSignal~

    #+BEGIN_SRC reason :exports code
      open ReactFrp.React;

      /* We'll have a component to show the user's input */
      module ShowName = {
        /* Now I won't ignore the first argument */
        let vdomS propS =>
          S.map
            eq::(fun _ _ => false)
            (
              fun name =>
                if (name != "") {
                  let greeting = {j|Hello, $name!|j};
                  <p> (ReasonReact.stringToElement greeting) </p>
                } else {
                  <p> (ReasonReact.stringToElement "Hello, unknown person!") </p>
                }
            )
            propsS;
        let component = ReasonReact.reducerComponent "ShowName";
        /* Notice how I pass the name prop to componentFromSignal */
        let make ::name _children => ReasonReact.componentFromSignal component name vdomS;
      };

      /* This time we won't update the signal automatically, instead we'll
         use user input */
      let (nameS, nameF) = S.create "";

      let vdomS =
        S.map
          eq::(fun _ _ => false)
          (
            fun name =>
              /* emitEventToStream will send the text value of an event to
                 the function passed as argument */
              <div>
                <input _type="text" onChange=(ReactReact.emitEventToStream nameF) />
                <ShowName name />
              </div>
          )
          nameS;

      let component = ReactReact.componentFromSignal "Input" vdomS;

      let make _children => component;
    #+END_SRC

** Running the examples
   The [[file:src/example.re][example file]] has both examples working together. You can read
   the source to see the library in action.

   To run it, run in a terminal

   #+BEGIN_SRC sh
     yarn install
     yarn start
   #+END_SRC

   And in a separate terminal window

   #+BEGIN_SRC sh
     yarn webpack
   #+END_SRC

   Then just open the [[file:src/index.html][index.html]] file in your browser of choice
